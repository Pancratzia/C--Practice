@page "/movements"
@using DemoCRUD.Shared
@inject HttpClient Http

<PageTitle>Movimientos</PageTitle>

<h1 class="text-center">Movimientos</h1>

<br />

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Fecha</th>
            <th scope="col">Descripción</th>
            <th scope="col">Cantidad</th>
            <th scope="col">Tipo</th>
            <th scope="col">Nombre</th>
            <th scope="col">Acciones</th>
        </tr>
    </thead>
    <tbody>
        

            @if (Listado.Count > 0)
            {
                @foreach (var movement in Listado)
                {
                <tr>
                    <th scope="row">@movement.Id</th>
                    <td>@movement.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@movement.Descripcion</td>
                    <td>@movement.Cantidad</td>
                    <td>@movement.Tipo</td>
                    <td>@movement.Usuario?.Nombre</td>
                    <td class="text-center">
                        <button type="button" class="btn btn-warning m-1">Editar</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => DeleteMovement(movement.Id))">Eliminar</button>
                    </td>
                </tr>
                }
            }

        
    </tbody>
</table>

<br />

<h3>Registrar Movimiento</h3>

<label class="form-label">Usuario: </label>
<InputSelect class="form-control" @bind-Value="@movimiento.UsuarioId">
    <option value="0">-- Seleccione --</option>
    @foreach (var user in ListadoUsuarios)
    {
        <option value="@user.Id">@user.Nombre</option>
    }
</InputSelect>

<br />
<label class="form-label">Cantidad: </label>
<input class="form-control" type="number" placeholder="Escriba la cantidad" @bind-value="movimiento.Cantidad" />
<br />
<label class="form-label">Tipo: </label>
<select class="form-control" @bind="@movimiento.Tipo">
    <option value="ingreso">Ingreso</option>
    <option value="egreso">Egreso</option>
</select>
<br />
<label class="form-label">Descripción: </label>
<input class="form-control" type="text" placeholder="Escriba la descripción" @bind-value="movimiento.Descripcion" />

<br />
<button @onclick="AddMovement" type="button" class="btn btn-primary">Guardar</button>

@if (!string.IsNullOrEmpty(Respuesta))
{
    <p class="alert alert-info mt-2" role="alert">@Respuesta</p>
}

@code {
    string Respuesta = "";
    public static List<Movement> Listado = new List<Movement>();
    public static List<User> ListadoUsuarios = new List<User>();
    User miUsuario = new User();
    Movement movimiento = new Movement();

    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
        await UpdateMovements();
    }

    async Task AddMovement()
    {
        var respuesta = await Http.PostAsJsonAsync("http://localhost:5137/api/Movement/AddMovement", movimiento);
        Respuesta = await respuesta.Content.ReadAsStringAsync();
        await UpdateMovements();
    }

    async Task UpdateUsers()
    {
        var usuarios = await Http.GetFromJsonAsync<List<User>>("http://localhost:5137/api/User/GetUsers");
        ListadoUsuarios = usuarios ?? new List<User>();
    }

    async Task UpdateMovements()
    {
        var movements = await Http.GetFromJsonAsync<List<Movement>>("http://localhost:5137/api/Movement/GetMovements");
        Listado = movements ?? new List<Movement>();
    }

    async Task DeleteMovement(int id)
    {
        var respuesta = await Http.DeleteAsync($"http://localhost:5137/api/Movement/{id}");
        Respuesta = await respuesta.Content.ReadAsStringAsync();
        await UpdateMovements();
    }
}